// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/loggregator_v2"
	"github.com/cloudfoundry/sonde-go/events"
)

type FakeClient struct {
	SendAppLogStub        func(appID, message, sourceType, sourceInstance string) error
	sendAppLogMutex       sync.RWMutex
	sendAppLogArgsForCall []struct {
		appID          string
		message        string
		sourceType     string
		sourceInstance string
	}
	sendAppLogReturns struct {
		result1 error
	}
	SendAppErrorLogStub        func(appID, message, sourceType, sourceInstance string) error
	sendAppErrorLogMutex       sync.RWMutex
	sendAppErrorLogArgsForCall []struct {
		appID          string
		message        string
		sourceType     string
		sourceInstance string
	}
	sendAppErrorLogReturns struct {
		result1 error
	}
	SendAppMetricsStub        func(metrics *events.ContainerMetric) error
	sendAppMetricsMutex       sync.RWMutex
	sendAppMetricsArgsForCall []struct {
		metrics *events.ContainerMetric
	}
	sendAppMetricsReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) SendAppLog(appID string, message string, sourceType string, sourceInstance string) error {
	fake.sendAppLogMutex.Lock()
	fake.sendAppLogArgsForCall = append(fake.sendAppLogArgsForCall, struct {
		appID          string
		message        string
		sourceType     string
		sourceInstance string
	}{appID, message, sourceType, sourceInstance})
	fake.recordInvocation("SendAppLog", []interface{}{appID, message, sourceType, sourceInstance})
	fake.sendAppLogMutex.Unlock()
	if fake.SendAppLogStub != nil {
		return fake.SendAppLogStub(appID, message, sourceType, sourceInstance)
	} else {
		return fake.sendAppLogReturns.result1
	}
}

func (fake *FakeClient) SendAppLogCallCount() int {
	fake.sendAppLogMutex.RLock()
	defer fake.sendAppLogMutex.RUnlock()
	return len(fake.sendAppLogArgsForCall)
}

func (fake *FakeClient) SendAppLogArgsForCall(i int) (string, string, string, string) {
	fake.sendAppLogMutex.RLock()
	defer fake.sendAppLogMutex.RUnlock()
	return fake.sendAppLogArgsForCall[i].appID, fake.sendAppLogArgsForCall[i].message, fake.sendAppLogArgsForCall[i].sourceType, fake.sendAppLogArgsForCall[i].sourceInstance
}

func (fake *FakeClient) SendAppLogReturns(result1 error) {
	fake.SendAppLogStub = nil
	fake.sendAppLogReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) SendAppErrorLog(appID string, message string, sourceType string, sourceInstance string) error {
	fake.sendAppErrorLogMutex.Lock()
	fake.sendAppErrorLogArgsForCall = append(fake.sendAppErrorLogArgsForCall, struct {
		appID          string
		message        string
		sourceType     string
		sourceInstance string
	}{appID, message, sourceType, sourceInstance})
	fake.recordInvocation("SendAppErrorLog", []interface{}{appID, message, sourceType, sourceInstance})
	fake.sendAppErrorLogMutex.Unlock()
	if fake.SendAppErrorLogStub != nil {
		return fake.SendAppErrorLogStub(appID, message, sourceType, sourceInstance)
	} else {
		return fake.sendAppErrorLogReturns.result1
	}
}

func (fake *FakeClient) SendAppErrorLogCallCount() int {
	fake.sendAppErrorLogMutex.RLock()
	defer fake.sendAppErrorLogMutex.RUnlock()
	return len(fake.sendAppErrorLogArgsForCall)
}

func (fake *FakeClient) SendAppErrorLogArgsForCall(i int) (string, string, string, string) {
	fake.sendAppErrorLogMutex.RLock()
	defer fake.sendAppErrorLogMutex.RUnlock()
	return fake.sendAppErrorLogArgsForCall[i].appID, fake.sendAppErrorLogArgsForCall[i].message, fake.sendAppErrorLogArgsForCall[i].sourceType, fake.sendAppErrorLogArgsForCall[i].sourceInstance
}

func (fake *FakeClient) SendAppErrorLogReturns(result1 error) {
	fake.SendAppErrorLogStub = nil
	fake.sendAppErrorLogReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) SendAppMetrics(metrics *events.ContainerMetric) error {
	fake.sendAppMetricsMutex.Lock()
	fake.sendAppMetricsArgsForCall = append(fake.sendAppMetricsArgsForCall, struct {
		metrics *events.ContainerMetric
	}{metrics})
	fake.recordInvocation("SendAppMetrics", []interface{}{metrics})
	fake.sendAppMetricsMutex.Unlock()
	if fake.SendAppMetricsStub != nil {
		return fake.SendAppMetricsStub(metrics)
	} else {
		return fake.sendAppMetricsReturns.result1
	}
}

func (fake *FakeClient) SendAppMetricsCallCount() int {
	fake.sendAppMetricsMutex.RLock()
	defer fake.sendAppMetricsMutex.RUnlock()
	return len(fake.sendAppMetricsArgsForCall)
}

func (fake *FakeClient) SendAppMetricsArgsForCall(i int) *events.ContainerMetric {
	fake.sendAppMetricsMutex.RLock()
	defer fake.sendAppMetricsMutex.RUnlock()
	return fake.sendAppMetricsArgsForCall[i].metrics
}

func (fake *FakeClient) SendAppMetricsReturns(result1 error) {
	fake.SendAppMetricsStub = nil
	fake.sendAppMetricsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendAppLogMutex.RLock()
	defer fake.sendAppLogMutex.RUnlock()
	fake.sendAppErrorLogMutex.RLock()
	defer fake.sendAppErrorLogMutex.RUnlock()
	fake.sendAppMetricsMutex.RLock()
	defer fake.sendAppMetricsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ loggregator_v2.Client = new(FakeClient)
